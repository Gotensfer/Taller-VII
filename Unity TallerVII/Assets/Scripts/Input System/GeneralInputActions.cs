//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input System/GeneralInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GeneralInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GeneralInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GeneralInputActions"",
    ""maps"": [
        {
            ""name"": ""Avatar"",
            ""id"": ""165db7ba-78a6-48b7-8264-417281fbe190"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""aad1d304-1777-404a-8e12-531dda2cf09d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""496b9401-fb28-4991-8655-52fd9c2c198a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""a5d8095f-366a-4c2b-ab53-b88df376f022"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""7718ab5a-223b-4584-b26a-c8144aea5be6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""60174e2d-ca25-48e4-9dfe-f980cd566df1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2a000571-17f2-4f1b-af53-f97e5246d1a0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f0d6eeca-56c8-4269-875f-c8f97f712eac"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""40064a44-6059-4722-a4b8-6f7587fe6165"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0d8d8b56-d586-4770-b358-d7f3065099ac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""417c1ef1-74e7-4807-8cd5-a231fead7d4a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12b3394f-142e-4d0c-9570-9bc2cc7f9ca0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6864bccc-8b6d-46fe-8405-95c5b771dca4"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfcd8c18-5d6b-41fe-a7c0-2a77577cf4f8"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7da73a7a-f2a8-4a18-966a-43ef82176cdf"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72e0a84f-ba39-4410-8289-f695a0767b95"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Avatar
        m_Avatar = asset.FindActionMap("Avatar", throwIfNotFound: true);
        m_Avatar_Move = m_Avatar.FindAction("Move", throwIfNotFound: true);
        m_Avatar_Jump = m_Avatar.FindAction("Jump", throwIfNotFound: true);
        m_Avatar_Crouch = m_Avatar.FindAction("Crouch", throwIfNotFound: true);
        m_Avatar_Dash = m_Avatar.FindAction("Dash", throwIfNotFound: true);
        m_Avatar_Pickup = m_Avatar.FindAction("Pickup", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Avatar
    private readonly InputActionMap m_Avatar;
    private IAvatarActions m_AvatarActionsCallbackInterface;
    private readonly InputAction m_Avatar_Move;
    private readonly InputAction m_Avatar_Jump;
    private readonly InputAction m_Avatar_Crouch;
    private readonly InputAction m_Avatar_Dash;
    private readonly InputAction m_Avatar_Pickup;
    public struct AvatarActions
    {
        private @GeneralInputActions m_Wrapper;
        public AvatarActions(@GeneralInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Avatar_Move;
        public InputAction @Jump => m_Wrapper.m_Avatar_Jump;
        public InputAction @Crouch => m_Wrapper.m_Avatar_Crouch;
        public InputAction @Dash => m_Wrapper.m_Avatar_Dash;
        public InputAction @Pickup => m_Wrapper.m_Avatar_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_Avatar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AvatarActions set) { return set.Get(); }
        public void SetCallbacks(IAvatarActions instance)
        {
            if (m_Wrapper.m_AvatarActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_AvatarActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_AvatarActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_AvatarActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_AvatarActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_AvatarActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_AvatarActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_AvatarActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_AvatarActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_AvatarActionsCallbackInterface.OnCrouch;
                @Dash.started -= m_Wrapper.m_AvatarActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_AvatarActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_AvatarActionsCallbackInterface.OnDash;
                @Pickup.started -= m_Wrapper.m_AvatarActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_AvatarActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_AvatarActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_AvatarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public AvatarActions @Avatar => new AvatarActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IAvatarActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
}
